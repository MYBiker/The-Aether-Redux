import net.neoforged.gradle.common.tasks.JarJar

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'net.neoforged.gradle.userdev' version '7.0.97'
}

boolean runWithDeps = false

version = "${mc_version}-${mod_version}-neoforge"
group = "net.zepalesque.redux"

base {
    archivesName = mod_id
}
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        dependencies {
            dependencies.get().runtime("curse.maven:aether-protect-your-moa-1016303:${build.project.protect_version}")
            dependencies.get().runtime("blank:aether_genesis-${build.project.genesis_version}:${build.project.genesis_version}")
        }
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod', 'aether'
    }

}


sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

subsystems {
    parchment {
        minecraftVersion = "${mc_version}"
        mappingsVersion = "${mappings}"
    }
}

dependencies {



    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation "com.aetherteam.aether:aether:${aether_version}"
    implementation "com.aetherteam.nitrogen:nitrogen_internals:${nitrogen_version}"
    implementation "com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}"
    implementation "net.zepalesque.zenith:zenith:${mc_version}-${zenith_version}-neoforge"
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+${mc_version}"

    implementation "curse.maven:aeroblender-879879:${project.aeroblender_version}"
    implementation "com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}"

    jarJar("curse.maven:aeroblender-879879:${project.aeroblender_version}") {
        jarJar.ranged(it, "[${project.aeroblender_version},)")
        jarJar.pin(it, "${project.aeroblender_version}")
    }
    jarJar("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}") {
        jarJar.ranged(it, "[${project.terrablender_version_minimum},${project.terrablender_version_maximum})")
        jarJar.pin(it, "${project.terrablender_version}")
    }

    jarJar("net.zepalesque.zenith:zenith:${zenith_version}") {
        jarJar.ranged(it, "[${zenith_version},)")
        jarJar.pin(it, "${zenith_version}")
    }





    // Other dependencies

    ifData(runWithDeps, dependencies, "blank:aether_genesis-${project.genesis_version}:${project.genesis_version}")
    ifData(runWithDeps, dependencies, "curse.maven:aether-protect-your-moa-1016303:${project.protect_version}")

}

static void ifData(boolean runWithDeps, DependencyHandler dependencies, Object args) {
    runWithDeps ? dependencies.add("implementation", args) : dependencies.add("compileOnly", args)
}


repositories {
    flatDir { dir 'libs' }
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("Zepalesque/Zenith")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version             : mc_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            zenith_version         : zenith_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "Zepalesque",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Zepalesque",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

compileJava {
    options.incremental = false
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

// TODO: maybe?
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.jar
            artifact project.sourceJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}