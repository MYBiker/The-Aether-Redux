import net.minecraftforge.gradle.userdev.tasks.JarJar

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '6.0.18'
    id 'org.spongepowered.mixin' version '0.7.38'
    id 'org.parchmentmc.librarian.forgegradle' version '1.2.0'
    id 'org.moddingx.modgradle.mapping' version '4.0.4'
    id 'org.moddingx.modgradle.sourcejar' version '4.0.4' apply false
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.8.5'
}

version = "${mod_version}-${mc_version}-neoforge"

group = 'net.zepalesque.redux'
base {
    archivesName = 'aether-redux'
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'sugarcane', version: project.mappings

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.A

    runs {
        client {

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aether_redux'

            args '--username', 'Zepalesque'

            mods {
                aether_redux {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aether_redux'

            mods {
                aether_redux {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aether_redux'


            mods {
                aether_redux  {
                    source sourceSets.main

                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'aether_redux', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'deep_aether', '--existing-mod', 'aether_genesis', '--existing-mod', 'aether', '--existing-mod', 'ancient_aether'

            mods {
                aether_redux {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

     flatDir {
         dir 'libs'
     }

    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven { url = 'https://maven.neoforged.net/releases/' }

    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
    }

    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
}

dependencies {

    minecraft "net.neoforged:forge:${project.mc_version}-${project.neoforge_version}"
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixinextras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${project.mixinextras_version}")) {
        jarJar.ranged(it, "[0.3.5,)")
    }

    implementation fg.deobf("com.aetherteam.aether:aether:${project.aether_version}")
    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation fg.deobf("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
    compileOnly "mezz.jei:jei-1.20.1-common:${project.jei_version}"
    compileOnly "mezz.jei:jei-1.20.1-forge:${project.jei_version}"

    // protect your Moam
    implementation fg.deobf("curse.maven:aether-protect-your-moa-1016303:${project.protect_version}")

    implementation fg.deobf("curse.maven:aether-treasure-reforging-1016302:${project.treasure_version}")

    compileOnly fg.deobf("curse.maven:ancient-aether-886751:${project.ancient_aether_version}")
    compileOnly fg.deobf("blank:aether_genesis-${project.genesis_version}:${project.genesis_version}")
    compileOnly fg.deobf("curse.maven:deep-aether-852465:${project.deep_aether_version}")
    compileOnly fg.deobf("curse.maven:aether-lost-content-318602:${project.lost_content_version}")

    implementation fg.deobf("curse.maven:jei-238222:${project.jei_curse_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")
    implementation fg.deobf("curse.maven:aeroblender-879879:${project.aeroblender_version}")
    implementation fg.deobf("curse.maven:geckolib-388172:${project.geckolib_version}")
    implementation fg.deobf("curse.maven:structure-gel-api-378802:${project.structure_gel_version}")
    runtimeOnly fg.deobf("curse.maven:appleskin-248787:${project.appleskin_version}")
    implementation fg.deobf("curse.maven:terrablender-563928:${project.terrablender_version}")
    runtimeOnly fg.deobf("curse.maven:spark-361579:${project.spark_version}")
    runtimeOnly fg.deobf("curse.maven:suggestion-provider-fix-469647:${project.suggestion_provider_fix_version}")
    runtimeOnly fg.deobf("curse.maven:embeddium-908741:${project.embeddium_version}")
    implementation fg.deobf("curse.maven:jade-324717:${project.jade_version}")
    compileOnly fg.deobf("curse.maven:galosphere-631098:${project.galosphere_version}")
    implementation fg.deobf("curse.maven:lootr-361276:${project.lootr_version}")
    implementation fg.deobf("curse.maven:cyanide-541676:${project.cyanide_version}")

//    jarJar fg.deobf("curse.maven:aeroblender-879879:${project.aeroblender_version}") {
//        jarJar.ranged(it, "[${project.aeroblender_version},)")
//        jarJar.pin(it, "${project.aeroblender_version}")
//    }

//    jarJar fg.deobf("curse.maven:terrablender-563928:${project.terrablender_version}") {
//        jarJar.ranged(it, "[${project.terrablender_version},)")
//        jarJar.pin(it, "${project.terrablender_version}")
//    }

//    jarJar fg.deobf("curse.maven:geckolib-388172:${project.geckolib_version}") {
//        jarJar.ranged(it, "[${project.geckolib_version},)")
//        jarJar.pin(it, "${project.geckolib_version}")
//    }

//    implementation fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-1.20.1:20.0.5")
//    implementation fg.deobf("net.darkhax.tips:Tips-Forge-1.20.1:12.0.5")
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : "aether_redux",
                "Specification-Vendor"    : "zepalesque",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "zepalesque",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'

    archiveClassifier = 'no-embeds'
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

tasks.jarJar.finalizedBy('reobfJarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named(sourceSets.main.compileJavaTaskName) {
    outputs.file("${it.temporaryDir}/${it.name}-refmap.json").withPropertyName("mixin refmap")
}

compileJava {
    options.incremental = false
}

mixin {
    config "aether_redux.mixins.json"
    add sourceSets.main, "aether_redux.refmap.json"
}

build {
    dependsOn 'jarJar'
}